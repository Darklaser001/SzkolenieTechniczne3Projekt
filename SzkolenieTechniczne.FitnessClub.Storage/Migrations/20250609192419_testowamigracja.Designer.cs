// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SzkolenieTechniczne.Geo.Storage;

#nullable disable

namespace SzkolenieTechniczne.FitnessClub.Storage.Migrations
{
    [DbContext(typeof(FitnessClubDbContext))]
    [Migration("20250609192419_testowamigracja")]
    partial class testowamigracja
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.ContactType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes", "Dictionaries");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.ContactTypeTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ContactTypeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ContactTypeId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId1");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("Name");

                    b.ToTable("ContactTypeTranslations", "Dictionaries");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alpha3Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalSourceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastSynchronizedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries", "Dictionaries");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.CountryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CountryTranslations", "Dictionaries");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.FitnessClub", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("PhonePrefix")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("VATNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("FitnessClubs", "Fitness");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.FitnessClubAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Community")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("FitnessClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FlatNumber")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Post")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Province")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Street")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("FitnessClubId")
                        .IsUnique();

                    b.ToTable("FitnessClubAddresses", "Fitness");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.StaffMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FitnessClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("GrossSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<short?>("WorkingHours")
                        .HasColumnType("smallint");

                    b.Property<short>("WorkingWeekHours")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FitnessClubId");

                    b.ToTable("StaffMembers", "Fitness");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.StaffMemberTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Responsibilities")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("StaffMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("StaffMemberId");

                    b.ToTable("StaffMemberTranslations", "Fitness");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.ContactTypeTranslation", b =>
                {
                    b.HasOne("SzkolenieTechniczne.FitnessClub.Storage.Entities.ContactType", "ContactType")
                        .WithMany("Translations")
                        .HasForeignKey("ContactTypeId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.CountryTranslation", b =>
                {
                    b.HasOne("SzkolenieTechniczne.FitnessClub.Storage.Entities.Country", null)
                        .WithMany("Translations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.FitnessClubAddress", b =>
                {
                    b.HasOne("SzkolenieTechniczne.FitnessClub.Storage.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SzkolenieTechniczne.FitnessClub.Storage.Entities.FitnessClub", "FitnessClub")
                        .WithOne("Address")
                        .HasForeignKey("SzkolenieTechniczne.FitnessClub.Storage.Entities.FitnessClubAddress", "FitnessClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("FitnessClub");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.StaffMember", b =>
                {
                    b.HasOne("SzkolenieTechniczne.FitnessClub.Storage.Entities.FitnessClub", "FitnessClub")
                        .WithMany("StaffMembers")
                        .HasForeignKey("FitnessClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitnessClub");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.StaffMemberTranslation", b =>
                {
                    b.HasOne("SzkolenieTechniczne.FitnessClub.Storage.Entities.StaffMember", "StaffMember")
                        .WithMany("Translations")
                        .HasForeignKey("StaffMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffMember");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.ContactType", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.Country", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.FitnessClub", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("StaffMembers");
                });

            modelBuilder.Entity("SzkolenieTechniczne.FitnessClub.Storage.Entities.StaffMember", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
